// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: mypb.proto

package mypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	JobScheduler_DispatchJob_FullMethodName = "/mypb.JobScheduler/DispatchJob"
)

// JobSchedulerClient is the client API for JobScheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobSchedulerClient interface {
	DispatchJob(ctx context.Context, in *DispatchJobRequest, opts ...grpc.CallOption) (*DispatchJobResponse, error)
}

type jobSchedulerClient struct {
	cc grpc.ClientConnInterface
}

func NewJobSchedulerClient(cc grpc.ClientConnInterface) JobSchedulerClient {
	return &jobSchedulerClient{cc}
}

func (c *jobSchedulerClient) DispatchJob(ctx context.Context, in *DispatchJobRequest, opts ...grpc.CallOption) (*DispatchJobResponse, error) {
	out := new(DispatchJobResponse)
	err := c.cc.Invoke(ctx, JobScheduler_DispatchJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobSchedulerServer is the server API for JobScheduler service.
// All implementations must embed UnimplementedJobSchedulerServer
// for forward compatibility
type JobSchedulerServer interface {
	DispatchJob(context.Context, *DispatchJobRequest) (*DispatchJobResponse, error)
	mustEmbedUnimplementedJobSchedulerServer()
}

// UnimplementedJobSchedulerServer must be embedded to have forward compatible implementations.
type UnimplementedJobSchedulerServer struct {
}

func (UnimplementedJobSchedulerServer) DispatchJob(context.Context, *DispatchJobRequest) (*DispatchJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DispatchJob not implemented")
}
func (UnimplementedJobSchedulerServer) mustEmbedUnimplementedJobSchedulerServer() {}

// UnsafeJobSchedulerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobSchedulerServer will
// result in compilation errors.
type UnsafeJobSchedulerServer interface {
	mustEmbedUnimplementedJobSchedulerServer()
}

func RegisterJobSchedulerServer(s grpc.ServiceRegistrar, srv JobSchedulerServer) {
	s.RegisterService(&JobScheduler_ServiceDesc, srv)
}

func _JobScheduler_DispatchJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DispatchJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobSchedulerServer).DispatchJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobScheduler_DispatchJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobSchedulerServer).DispatchJob(ctx, req.(*DispatchJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JobScheduler_ServiceDesc is the grpc.ServiceDesc for JobScheduler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobScheduler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mypb.JobScheduler",
	HandlerType: (*JobSchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DispatchJob",
			Handler:    _JobScheduler_DispatchJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mypb.proto",
}

const (
	JobStatus_JobStarted_FullMethodName   = "/mypb.JobStatus/JobStarted"
	JobStatus_JobCompleted_FullMethodName = "/mypb.JobStatus/JobCompleted"
)

// JobStatusClient is the client API for JobStatus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobStatusClient interface {
	JobStarted(ctx context.Context, in *JobStartedRequest, opts ...grpc.CallOption) (*JobStartedResponse, error)
	JobCompleted(ctx context.Context, in *JobCompletedRequest, opts ...grpc.CallOption) (*JobCompletedResponse, error)
}

type jobStatusClient struct {
	cc grpc.ClientConnInterface
}

func NewJobStatusClient(cc grpc.ClientConnInterface) JobStatusClient {
	return &jobStatusClient{cc}
}

func (c *jobStatusClient) JobStarted(ctx context.Context, in *JobStartedRequest, opts ...grpc.CallOption) (*JobStartedResponse, error) {
	out := new(JobStartedResponse)
	err := c.cc.Invoke(ctx, JobStatus_JobStarted_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobStatusClient) JobCompleted(ctx context.Context, in *JobCompletedRequest, opts ...grpc.CallOption) (*JobCompletedResponse, error) {
	out := new(JobCompletedResponse)
	err := c.cc.Invoke(ctx, JobStatus_JobCompleted_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobStatusServer is the server API for JobStatus service.
// All implementations must embed UnimplementedJobStatusServer
// for forward compatibility
type JobStatusServer interface {
	JobStarted(context.Context, *JobStartedRequest) (*JobStartedResponse, error)
	JobCompleted(context.Context, *JobCompletedRequest) (*JobCompletedResponse, error)
	mustEmbedUnimplementedJobStatusServer()
}

// UnimplementedJobStatusServer must be embedded to have forward compatible implementations.
type UnimplementedJobStatusServer struct {
}

func (UnimplementedJobStatusServer) JobStarted(context.Context, *JobStartedRequest) (*JobStartedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobStarted not implemented")
}
func (UnimplementedJobStatusServer) JobCompleted(context.Context, *JobCompletedRequest) (*JobCompletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobCompleted not implemented")
}
func (UnimplementedJobStatusServer) mustEmbedUnimplementedJobStatusServer() {}

// UnsafeJobStatusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobStatusServer will
// result in compilation errors.
type UnsafeJobStatusServer interface {
	mustEmbedUnimplementedJobStatusServer()
}

func RegisterJobStatusServer(s grpc.ServiceRegistrar, srv JobStatusServer) {
	s.RegisterService(&JobStatus_ServiceDesc, srv)
}

func _JobStatus_JobStarted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobStartedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobStatusServer).JobStarted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobStatus_JobStarted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobStatusServer).JobStarted(ctx, req.(*JobStartedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobStatus_JobCompleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobCompletedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobStatusServer).JobCompleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobStatus_JobCompleted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobStatusServer).JobCompleted(ctx, req.(*JobCompletedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JobStatus_ServiceDesc is the grpc.ServiceDesc for JobStatus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobStatus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mypb.JobStatus",
	HandlerType: (*JobStatusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JobStarted",
			Handler:    _JobStatus_JobStarted_Handler,
		},
		{
			MethodName: "JobCompleted",
			Handler:    _JobStatus_JobCompleted_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mypb.proto",
}

const (
	EtcdHello_WorkerHello_FullMethodName = "/mypb.EtcdHello/WorkerHello"
)

// EtcdHelloClient is the client API for EtcdHello service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EtcdHelloClient interface {
	WorkerHello(ctx context.Context, in *WorkerHelloRequest, opts ...grpc.CallOption) (*WorkerHelloResponse, error)
}

type etcdHelloClient struct {
	cc grpc.ClientConnInterface
}

func NewEtcdHelloClient(cc grpc.ClientConnInterface) EtcdHelloClient {
	return &etcdHelloClient{cc}
}

func (c *etcdHelloClient) WorkerHello(ctx context.Context, in *WorkerHelloRequest, opts ...grpc.CallOption) (*WorkerHelloResponse, error) {
	out := new(WorkerHelloResponse)
	err := c.cc.Invoke(ctx, EtcdHello_WorkerHello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EtcdHelloServer is the server API for EtcdHello service.
// All implementations must embed UnimplementedEtcdHelloServer
// for forward compatibility
type EtcdHelloServer interface {
	WorkerHello(context.Context, *WorkerHelloRequest) (*WorkerHelloResponse, error)
	mustEmbedUnimplementedEtcdHelloServer()
}

// UnimplementedEtcdHelloServer must be embedded to have forward compatible implementations.
type UnimplementedEtcdHelloServer struct {
}

func (UnimplementedEtcdHelloServer) WorkerHello(context.Context, *WorkerHelloRequest) (*WorkerHelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorkerHello not implemented")
}
func (UnimplementedEtcdHelloServer) mustEmbedUnimplementedEtcdHelloServer() {}

// UnsafeEtcdHelloServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EtcdHelloServer will
// result in compilation errors.
type UnsafeEtcdHelloServer interface {
	mustEmbedUnimplementedEtcdHelloServer()
}

func RegisterEtcdHelloServer(s grpc.ServiceRegistrar, srv EtcdHelloServer) {
	s.RegisterService(&EtcdHello_ServiceDesc, srv)
}

func _EtcdHello_WorkerHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerHelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EtcdHelloServer).WorkerHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EtcdHello_WorkerHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EtcdHelloServer).WorkerHello(ctx, req.(*WorkerHelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EtcdHello_ServiceDesc is the grpc.ServiceDesc for EtcdHello service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EtcdHello_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mypb.EtcdHello",
	HandlerType: (*EtcdHelloServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WorkerHello",
			Handler:    _EtcdHello_WorkerHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mypb.proto",
}
